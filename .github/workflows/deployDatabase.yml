name: 'Desplegar Esquemas de Base de Datos (Liquibase)'

on:
  workflow_run:
    # Se activa cuando el workflow de infraestructura termina
    workflows: ["Desplegar Infraestructura de Azure (Terraform)"]
    types:
      - completed
  workflow_dispatch: # Permite ejecución manual también

jobs:
  deploy-schemas:
    name: 'Desplegar Esquemas SQL'
    runs-on: ubuntu-latest
    
    # Condición para ejecutarse:
    # 1. Si se disparó manualmente (workflow_dispatch)
    # 2. O si el workflow de infra que lo disparó tuvo éxito (conclusion == 'success')
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    strategy:
      fail-fast: false
      matrix:
        # Matriz para ejecutar un trabajo por cada base de datos
        db_config:
          - { db_name: "db_envios_erd",    changelog: "changelog-envios-erd.xml" }
          - { db_name: "db_envios_dim",    changelog: "changelog-envios-dim.xml" }
          - { db_name: "db_reservas_erd",  changelog: "changelog-reservas-erd.xml" }
          - { db_name: "db_reservas_dim",  changelog: "changelog-reservas-dim.xml" }
          - { db_name: "db_proyectos_erd", changelog: "changelog-proyectos-erd.xml" }
          - { db_name: "db_proyectos_dim", changelog: "changelog-proyectos-dim.xml" }

    steps:
      - name: Checkout del código del repositorio
        uses: actions/checkout@v4

      - name: Instalar la CLI de GitHub
        uses: crazy-max/gh-cli@v5 # <-- ACTUALIZADO a la última versión estable
        with:
          install-only: true
          
      - name: Encontrar la última ejecución exitosa del workflow de Infraestructura
        id: find_run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Si el trigger fue otro workflow, usa su ID directamente.
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "Ejecución disparada por workflow. Usando Run ID: ${{ github.event.workflow_run.id }}"
          else
            # Si el trigger fue manual, busca la última ejecución exitosa.
            echo "Ejecución manual. Buscando la última ejecución exitosa de 'Desplegar Infraestructura de Azure (Terraform)'..."
            LATEST_SUCCESS_RUN_ID=$(gh run list --workflow="Desplegar Infraestructura de Azure (Terraform)" --status=success --branch=main --json databaseId -q '.[0].databaseId')
            
            if [ -z "$LATEST_SUCCESS_RUN_ID" ]; then
              echo "::error::No se encontró ninguna ejecución exitosa del workflow de infraestructura en la rama 'main'."
              exit 1
            fi
            
            echo "run_id=$LATEST_SUCCESS_RUN_ID" >> $GITHUB_OUTPUT
            echo "Última ejecución exitosa encontrada. Usando Run ID: $LATEST_SUCCESS_RUN_ID"
          fi

      - name: Descargar artefacto desde la ejecución encontrada
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          run-id: ${{ steps.find_run.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Instalar 'jq' para procesar JSON
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Leer outputs de Terraform y configurar variables de entorno
        run: |
          echo "Leyendo el archivo terraform-outputs.json..."
          echo "SQL_SERVER_FQDN=$(jq -r '.sql_server_fqdn.value' terraform-outputs.json)" >> $GITHUB_ENV
          echo "SQL_ADMIN_USER=$(jq -r '.sql_admin_login_output.value' terraform-outputs.json)" >> $GITHUB_ENV
          
          SQL_PASSWORD=$(jq -r '.sql_admin_password_output.value' terraform-outputs.json)
          echo "::add-mask::$SQL_PASSWORD"
          echo "SQL_PASSWORD=$SQL_PASSWORD" >> $GITHUB_ENV
          echo "Variables de entorno configuradas."

      - name: Desplegar esquema en ${{ matrix.db_config.db_name }} con Liquibase
        uses: liquibase-github-actions/update@v4.18.0
        with:
          changelogFile: ${{ matrix.db_config.changelog }}
          url: "jdbc:sqlserver://${{ env.SQL_SERVER_FQDN }}:1433;databaseName=${{ matrix.db_config.db_name }};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
          username: ${{ env.SQL_ADMIN_USER }}
          password: ${{ env.SQL_PASSWORD }}